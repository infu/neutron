
  
// THIS FILE IS AUTOGENERATED
// YOU WILL GET TYPECHECK ERRORS HERE. DON'T EDIT IT
// INSTEAD EDIT YOUR MODULE OR neutron.json
    
  
    

import kernel "main";
    

shared({caller = _installer}) actor class Class() = this {
 


    
        
    type Memory_kernel_store = {
        #v1 : kernel.Memory_kernel;
    };

    stable let memory_store_kernel:Memory_kernel_store = #v1(kernel.memory_kernel());

    let #v1(memory_kernel) = memory_store_kernel;

    let kernel_init = kernel.Init(memory_kernel);

                  

        
    public shared({ caller }) func kernel_authorized_add(req: kernel.kernel_authorized_add_Input) : async kernel.kernel_authorized_add_Output {
        assert(kernel_init.is_authorized(caller));
         kernel_init.kernel_authorized_add(req )
    };
    

    public shared({ caller }) func kernel_authorized_rem(req: kernel.kernel_authorized_rem_Input) : async kernel.kernel_authorized_rem_Output {
        assert(kernel_init.is_authorized(caller));
         kernel_init.kernel_authorized_rem(req )
    };
    

      private func module_kernel_is_authorized(req: kernel.is_authorized_Input) :  kernel.is_authorized_Output {
         kernel_init.is_authorized(req)
      };
      

    public query({ caller }) func kernel_check_authorized(req: kernel.kernel_check_authorized_Input) : async kernel.kernel_check_authorized_Output {
        
         kernel_init.kernel_check_authorized(req ,caller)
    };
    

    public shared({ caller }) func kernel_static(req: kernel.kernel_static_Input) : async kernel.kernel_static_Output {
        assert(kernel_init.is_authorized(caller));
         kernel_init.kernel_static(req )
    };
    

    public query({ caller }) func kernel_static_query(req: kernel.kernel_static_query_Input) : async kernel.kernel_static_query_Output {
        assert(kernel_init.is_authorized(caller));
         kernel_init.kernel_static_query(req )
    };
    

    public query({ caller }) func http_request(req: kernel.http_request_Input) : async kernel.http_request_Output {
        
         kernel_init.http_request(req ,caller,this)
    };
    

    public query({ caller }) func http_request_streaming_callback(req: kernel.http_request_streaming_callback_Input) : async kernel.http_request_streaming_callback_Output {
        
         kernel_init.http_request_streaming_callback(req )
    };
    

    public shared({ caller }) func kernel_install_code(req: kernel.kernel_install_code_Input) : async kernel.kernel_install_code_Output {
        assert(kernel_init.is_authorized(caller));
        await  kernel_init.kernel_install_code(req ,this)
    };
    
   
   

    
      
    kernel_init.kernel_authorized_add(_installer);
}
    