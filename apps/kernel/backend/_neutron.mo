
  
// THIS FILE IS AUTOGENERATED
// YOU WILL GET TYPECHECK ERRORS HERE, BUT YOU CAN'T EDIT IT
// INSTEAD EDIT YOUR MODULE or neutron.json
    
  
    
import Set "mo:motoko-hash-map/Set";
import kernel "./main";
    

shared({caller = _installer}) actor class Class() = this {
    
  let { phash } = Set;
  stable let authorized = Set.fromIter([_installer].vals(), phash);

  public shared({caller}) func authorized_add(id : Principal) : async () {
    assert(Set.has(authorized, phash, caller));
    ignore Set.add(authorized, phash, id);
  };

  public shared({caller}) func authorized_rem(id : Principal) : async () {
    assert(Set.has(authorized, phash, caller));
    ignore Set.remove(authorized, phash, id);
  };

    
        
    type Memory_kernel_store = {
        #v1 : kernel.Memory_kernel;
    };

    stable let memory_store_kernel:Memory_kernel_store = #v1(kernel.memory_kernel());

    let #v1(memory_kernel) = memory_store_kernel;
        

        
    public shared({ caller }) func kernel_static(req: kernel.Input_kernel_static) : async kernel.Output_kernel_static {
        assert(Set.has(authorized, phash, caller));
        kernel.kernel_static(memory_kernel,req)
    };
    

    public query({ caller }) func kernel_static_query(req: kernel.Input_kernel_static_query) : async kernel.Output_kernel_static_query {
        assert(Set.has(authorized, phash, caller));
        kernel.kernel_static_query(memory_kernel,req)
    };
    

    public query({ caller }) func http_request(req: kernel.Input_http_request) : async kernel.Output_http_request {
        
        kernel.http_request(memory_kernel,this.http_request_streaming_callback,req)
    };
    

    public query({ caller }) func http_request_streaming_callback(req: kernel.Input_http_request_streaming_callback) : async kernel.Output_http_request_streaming_callback {
        
        kernel.http_request_streaming_callback(memory_kernel,req)
    };
    

    public query({ caller }) func kernel_use_hello_world(req: kernel.Input_kernel_use_hello_world) : async kernel.Output_kernel_use_hello_world {
        assert(Set.has(authorized, phash, caller));
        kernel.kernel_use_hello_world(memory_kernel,module_kernel_hello_world,req)
    };
    
   
        
      private func module_kernel_hello_world(req: kernel.Input_hello_world) : kernel.Output_hello_world {
          kernel.hello_world(memory_kernel,req)
      };
      

    
}
    