{"cells":[{"kind":2,"language":"javascript","value":"\n// let local = icblast({ local: true, identity, local_host: \"http://localhost:8080\" });\n\n// let can = await local(\"bkyz2-fmaaa-aaaaa-qaaaq-cai\");\n\nlet can = await ic(\"nzngn-miaaa-aaaag-abrwq-cai\");\nlog(me);\nglobal({ can });\n\n"},{"kind":2,"language":"javascript","value":"\nawait can.kernel_static_query({\n    list: {\n        prefix: \"\"\n    }\n}).then(log);\n"},{"kind":2,"language":"javascript","value":"const {default: plimit} = await import(\"https://cdn.jsdelivr.net/npm/p-limit@4.0.0/+esm\"); // So we can limit the concurrent async requests. Promise.all will crash vscode if too many requests are made.\n\nfunction generateRandomUint8Array() {\n    // Generate a random length around 300KB\n    const randomLength = Math.floor(Math.random() * 900 + 10) * 1024; \n\n    // Create a new Uint8Array of that length\n    let array = new Uint8Array(randomLength);\n\n    // Fill the array with random values\n    for(let i = 0; i < array.length; i++) {\n        array[i] = Math.floor(Math.random() * 256);\n    }\n\n    return array;\n}\n\nconst limit = plimit(20); // Max 20 concurrent requests\nawait can.kernel_static({\n    clear: { prefix: \"\" }\n}).then(log);\n\nawait Promise.all(Array(5).fill(0).map((_) => limit(() => can.kernel_static({\n    store: {\n        key: \"/app/react/static/js/main.f830f6ac.js.map\",\n        val: {\n            content:generateRandomUint8Array(),\n            content_type: \"text/plain\",\n            chunks: 1,\n            content_encoding: \"identity\"\n        }\n    }\n}))));\n   \n\n"},{"kind":2,"language":"javascript","value":"log(identity.getPrincipal())"},{"kind":2,"language":"javascript","value":"// let content = await readFile(\"./failed.bin\") // BLOB\n\nawait can.kernel_static({\n    store: {\n    key:\"/static/js/main.f830f6ac.js.LICENSE.txt\",\n    val:{\n      content : [],\n      content_type:\"gzip\",\n      chunks:1,\n      content_encoding:\"gzip\"\n      }\n  }})"},{"kind":2,"language":"javascript","value":"\n\n\nawait can.kernel_static_query({\n    list: {\n        prefix: \"\"\n    }\n}).then(log);\n\nglobal({ can });"}]}