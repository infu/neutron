type Token = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt vec nat8;
 };
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: CallbackFunc;
                              token: Token;
                            };};
type Output_kernel_use_hello_world = text;
type Output_kernel_static_query = vec text;
type Output_kernel_static = null;
type Output_kernel_install_code = null;
type Output_kernel_authorized_rem = null;
type Output_kernel_authorized_add = null;
type Output_http_request_streaming_callback = 
 record {
   body: blob;
   token: opt Token;
 };
type Output_http_request = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Input_kernel_use_hello_world = null;
type Input_kernel_static_query = variant {list: record {prefix: text;};};
type Input_kernel_static = 
 variant {
   clear: record {prefix: text;};
   delete: record {key: text;};
   store: record {
            key: text;
            val: File;
          };
 };
type Input_kernel_install_code = 
 record {
   candid: text;
   wasm: vec nat8;
 };
type Input_kernel_authorized_rem = principal;
type Input_kernel_authorized_add = principal;
type Input_http_request_streaming_callback = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt vec nat8;
 };
type Input_http_request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type File = 
 record {
   content: blob;
   content_encoding: text;
   content_type: text;
 };
type Class = 
 service {
   http_request: (Input_http_request) -> (Output_http_request) query;
   http_request_streaming_callback:
    (Input_http_request_streaming_callback) ->
    (Output_http_request_streaming_callback) query;
   kernel_authorized_add: (Input_kernel_authorized_add) ->
    (Output_kernel_authorized_add);
   kernel_authorized_rem: (Input_kernel_authorized_rem) ->
    (Output_kernel_authorized_rem);
   kernel_install_code: (Input_kernel_install_code) ->
    (Output_kernel_install_code);
   kernel_static: (Input_kernel_static) -> (Output_kernel_static);
   kernel_static_query: (Input_kernel_static_query) ->
    (Output_kernel_static_query) query;
   kernel_use_hello_world: (Input_kernel_use_hello_world) ->
    (Output_kernel_use_hello_world) query;
 };
type CallbackFunc = func (Token) -> (Callback) query;
type Callback = 
 record {
   body: blob;
   token: opt Token;
 };
service : () -> Class
